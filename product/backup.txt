# #return all fields
# @app.get('/product')
# def getProduct(db: Session = Depends(get_db)):
#     product=db.query(models.Product).all()
#     return product


# @app.get('/product/{id}',response_model=List[schemas.DisplayProduct])
# def getProduct(id,response:Response,db: Session = Depends(get_db)):
#     product = db.query(models.Product).filter(models.Product.id == id).first()

#     if not product:
#         if not product:
#             raise HTTPException(status_code=404, detail='Product not found')
        
#     return product




# @app.put('/product/{id}')
# def update_product(id: int, request: schemas.Product, db: Session = Depends(get_db)):
#     product = db.query(models.Product).filter(models.Product.id == id)
#     if not product.first():
#         pass
#     product.update(request.dict())
#     db.commit()
#     return {'Product Sucessful'}


# @app.delete('/product/{id}')
# def delete_product(id: int, db: Session = Depends(get_db)):
#     db.query(models.Product).filter(models.Product.id==id).delete(synchronize_session=False)
#     db.commit()
#     return{'Deleted '}







# @app.post('/addevent')
# def addevent(event:Event):
#     return event




# #adding data in database before model relationship
# @app.post('/product',status_code=status.HTTP_201_CREATED)
# def create(request:schemas.Product,db:Session=Depends(get_db)):
#     new_product=models.Product(name=request.name,decscription=request.decscription,price=request.price)
#     db.add(new_product)
#     db.commit()
#     db.refresh(new_product)
#     return request